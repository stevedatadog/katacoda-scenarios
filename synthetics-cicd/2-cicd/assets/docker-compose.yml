version: '3'

networks:
  labnet:
    name: labnet
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.name: "lab-bridge-0"
      com.docker.network.bridge.enable_ip_masquerade: "true"

services:
  #
  # CI/CD
  #
  cicd-db:
    container_name: cicd-db
    image: postgres:13.2-alpine
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "gogs"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "gogs"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Dump file from pg_dump to seed the DB
    volumes:
      - ./seed.sql:/docker-entrypoint-initdb.d/seed.sql
    networks:
      - labnet
  gogs:
    container_name: gogs
    image: gogs/gogs:0.12.3
    depends_on:
      - cicd-db
    ports:
      - "8300:3000"
      - "8322:22"
    # Configuration file and starter repo
    volumes:
      - ./gogs.app.ini:/data/gogs/conf/app.ini
      - ./labuser.git:/data/git/gogs-repositories/labuser
    networks:
      - labnet
  drone-server:
    container_name: drone_server
    image: drone/drone:1.10.1
    depends_on:
      - cicd-db
    environment:
      - DRONE_AGENTS_ENABLED=true
      - DRONE_GOGS_SERVER # http://docker-host:8300
      - DRONE_RPC_SECRET=verysecret
      - DRONE_SERVER_HOST=drone-server
      - DRONE_SERVER_PROTO=http
    ports:
      - "8800:80"
    # Note: We could use the postgres database for this, but it's too slow to start
    volumes:
      - ./droneio.database.sqlite:/data/database.sqlite
    networks:
      - labnet
  drone-runner:
    container_name: drone_runner
    image: drone/drone-runner-docker:1.6.3
    depends_on:
      - drone-server
    environment:
      - DRONE_RPC_HOST=drone-server
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_SECRET=verysecret
      - DRONE_RUNNER_CAPACITY=2
      # Child runners get their own Docker networks. Set this to `basename $PWD`_default to add them to the
      # default network instead. This allows access to other containers, such as registry
      - DRONE_RUNNER_NETWORKS=labnet
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - labnet
  registry:
    container_name: registry
    image: registry:2.6.2
    # restart: unless-stopped
    ports:
      - "5000:5000"
    networks:
      - labnet
  #
  # Storedog
  #
  agent:
    image: "datadog/agent:7.21.0"
    environment:
      - DD_API_KEY
      - DD_APM_ENABLED=true
      - DD_LOGS_ENABLED=true
      - DD_PROCESS_AGENT_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_ENV=synthetics-cicd
      - DD_SYSTEM_PROBE_ENABLED=true 
    ports:
      - "8126:8126"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /sys/kernel/debug:/sys/kernel/debug 
    cap_add:
      - SYS_ADMIN 
      - SYS_RESOURCE 
      - SYS_PTRACE 
      - NET_ADMIN 
      - IPC_LOCK 
    security_opt:
      - apparmor:unconfined  
    labels:
      com.datadoghq.ad.logs: '[{"source": "agent", "service": "agent"}]'
  discounts:
    environment:
      - FLASK_APP=discounts.py
      - FLASK_DEBUG=1
      - POSTGRES_PASSWORD
      - POSTGRES_USER
      - DD_AGENT_HOST=agent
      - DD_LOGS_INJECTION=true
      - DD_TRACE_ANALYTICS_ENABLED=true
      - DD_SERVICE=discounts-service
      - DD_VERSION=1.0
      - DD_ENV=synthetics-cicd
    image: "localhost:5000/labuser/discounts-service:latest"
    command: [sh, -c, "pip install ddtrace -U && ddtrace-run flask run --port=5001 --host=0.0.0.0"]
    ports:
      - "5001:5001"
    volumes:
      - /ecommworkshop/discounts-service-fixed:/app
    depends_on:
      - agent
      - db
      - registry
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "discounts-service"}]'
      com.datadoghq.tags.service: 'discounts-service'
      com.datadoghq.tags.env: 'synthetics-cicd'
  frontend:
    environment:
      - DD_AGENT_HOST=agent
      - DD_LOGS_INJECTION=true
      - DD_TRACE_ANALYTICS_ENABLED=true
      - DB_USERNAME
      - DB_PASSWORD
      - DD_CLIENT_TOKEN
      - DD_APPLICATION_ID
      - DD_SERVICE=store-frontend
      - DD_VERSION=1.0
      - DD_ENV=synthetics-cicd
    image: "ddtraining/ecommerce-frontend:latest"
    command: sh docker-entrypoint.sh
    ports:
      - "3000:3000"
    volumes:
      - /ecommworkshop/store-frontend-instrumented-fixed:/spree
    depends_on:
      - agent
      - db
      - discounts
      - advertisements
    labels:
      com.datadoghq.ad.logs: '[{"source": "ruby", "service": "store-frontend"}]'
      com.datadoghq.tags.service: 'store-frontend'
      com.datadoghq.tags.env: 'synthetics-cicd'
  advertisements:
    environment:
      - FLASK_APP=ads.py
      - FLASK_DEBUG=1
      - POSTGRES_PASSWORD
      - POSTGRES_USER
      - DD_AGENT_HOST=agent
      - DD_LOGS_INJECTION=true
      - DD_TRACE_ANALYTICS_ENABLED=true
      - DD_SERVICE=advertisements-service
      - DD_VERSION=1.0
      - DD_ENV=synthetics-cicd
    image: "ddtraining/advertisements-service:latest"
    command: [sh, -c, "pip install ddtrace -U && ddtrace-run flask run --port=5002 --host=0.0.0.0"]
    ports:
      - "5002:5002"
    volumes:
      - /ecommworkshop/ads-service:/app
    depends_on:
      - agent
      - db
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "advertisements-service"}]'
      com.datadoghq.tags.service: 'advertisements-service'
      com.datadoghq.tags.env: 'synthetics-cicd'
  db:
    image: postgres:11-alpine
    restart: always
    environment:
      - POSTGRES_PASSWORD
      - POSTGRES_USER
      - DD_SERVICE=postgres
      - DD_VERSION=1.0
      - DD_ENV=synthetics-cicd
    labels:
      com.datadoghq.ad.logs: '[{"source": "postgresql", "service": "postgres"}]'
      com.datadoghq.tags.service: 'advertisements-service'
      com.datadoghq.tags.env: 'synthetics-cicd'
